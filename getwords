#!/bin/wpemu -r -f
000198 00000000	
                *
                * getwords.s	a routine which pushes a csv to BSS dest
                *

000000 480001a0	main	MOV	$buf,R8
000004 490021a4		MOV	$rptr,R9
000008 4a0021a0		MOV	$eptr,R10
00000c a8900000		MOV	R8,0(R9)	*point rptr to buf
000010 a8a00000		MOV	R8,0(R10)	*point eptr to buf
000014 48000000		MOV	$0,R8
000018 49000000		MOV	$0,R9
00001c 4a000000		MOV	$0,R10
000020 470021a8		MOV	$dest,R7
000024 f7000018		JMPL	openf
000028 f700002e	getwd	JMPL	getc
00002c 03000000		MOV	R0,R3
000030 44000041		MOV	$65,R4
000034 05390004		SUB	R3,R4,R5	*if c >= 'A'
000038 e8000008		JPL	isupr		
00003c 40090000		SUB	R0,$0,R0	*if < 'A', check for EOF(0)
000040 e9fffff9		JNE	getwd
000044 e1000003		JEQ	finish

000048 b0700000	store	MOVB	R0,0(R7)
00004c 47780001		ADD	R7,$1,R7
000050 e7fffff5		JMP	getwd

000054 f7000019	finish	JMPL	closef
000058 e7000048		JMP	exit

00005c 44000019	isupr	MOV	$25,R4	
000060 05490005		SUB	R4,R5,R5
000064 e8fffff8		JPL	store
000068 e7000000		JMP	islwr		

00006c 44000061	islwr	MOV	$97,R4
000070 05390004		SUB	R3,R4,R5
000074 e0ffffec		JMI	getwd		*c >= 91 && c <= 96 
000078 44000019		MOV	$25,R4
00007c 05490005		SUB	R4,R5,R5
000080 e8fffff1		JPL	store
000084 e7ffffe8		JMP	getwd		*c >= 122

000088 4ee90008	openf	SUB	R14,$8,R14	*allocate stack space
00008c afe00008		MOV 	R15,8(R14)	*push link
000090 41000184		MOV	$in,R1
000094 a1e00000		MOV	R1,0(R14)	*push path
000098 41000000		MOV	$mode,R1
00009c a1e00004		MOV	R1,4(R14)	*push mode
0000a0 40000000		MOV	$open,R0
0000a4 c7000010		SYSCALL
0000a8 4100019c		MOV	$fd,R1
0000ac a0100000		MOV	R0,0(R1)	*save fd
0000b0 8fe00008		MOV	8(R14),R15	*pop link
0000b4 4ee80008		ADD	R14,$8,R14	*move stack frame
0000b8 c700000f		JMP	(R15)

0000bc 4ee90004	closef	SUB	R14,$4,R14	*allocate stack space
0000c0 afe00004		MOV	R15,4(R14)	*push link
0000c4 4100019c		MOV	$fd,R1
0000c8 82100000		MOV	0(R1),R2
0000cc a2e00000		MOV	R2,0(R14)	*push fd
0000d0 40000003		MOV	$close,R0
0000d4 c7000010		SYSCALL
0000d8 8fe00004		MOV	4(R14),R15	*pop link
0000dc 4ee80004		ADD	R14,$4,R14	*move stack frame
0000e0 c700000f		JMP	(R15)

0000e4 480021a4	getc	MOV	$rptr,R8
0000e8 490021a0		MOV	$eptr,R9
0000ec 8a800000		MOV	0(R8),R10
0000f0 8b900000		MOV	0(R9),R11
0000f4 0ca9000b		SUB	R10,R11,R12
0000f8 ed000006		JGE	readf
0000fc 90a00000	rtnc	MOVB	0(R10),R0
000100 4aa80001		ADD	R10,$1,R10
000104 aa800000		MOV	R10,0(R8)
000108 c700000f		JMP	(R15)

00010c 40000000	rtn0	MOV	$0,R0
000110 c700000f		JMP	(R15)

000114 4ee90008	readf	SUB	R14,$8,R14
000118 4100019c		MOV	$fd,R1
00011c 82100000		MOV	0(R1),R2
000120 a2e00000		MOV	R2,0(R14)	*push fd
000124 410001a0		MOV	$buf,R1
000128 a1e00004		MOV	R1,4(R14)	*push buf
00012c 41000004		MOV	$len,R1
000130 a1e00008		MOV	R1,8(R14)	*push len
000134 40000001		MOV	$read,R0
000138 c7000010		SYSCALL
00013c 41000198		MOV	$n,R1		*technically can do this w/o label n
000140 a0100000		MOV	R0,0(R1)	*save n
000144 82100000		MOV	0(R1),R2
000148 42290000		SUB	R2,$0,R2
00014c e1ffffef		JEQ	rtn0		*if nothing read, return 0
000150 480021a4		MOV	$rptr,R8
000154 490021a0		MOV	$eptr,R9
000158 4a0001a0		MOV	$buf,R10
00015c aa800000		MOV	R10,0(R8)	*rptr is at buf[0]
000160 0c00000a		MOV	R10,R12
000164 8d800000		MOV	0(R8),R13
000168 0b00000a		MOV	R10,R11
00016c 0b28000b		ADD	R2,R11,R11	*add n to eptr to shift address limit
000170 ab900000		MOV	R11,0(R9)	*store updated eptr
000174 4ee80008		ADD	R14,$8,R14	*move stack frame
000178 e7ffffe0		JMP	rtnc		*made read, continue with getc

00017c 40000004	exit	MOV	$4,R0
000180 c7000010		SYSCALL
       ffffffff	stackb	EQU	FFFF
000184 7273752f	in	STRINGZ '/usr/cde/wirth/words'
000188 6564632f	
00018c 7269772f	
000190 772f6874	
000194 7364726f	
000198 00000000	
       00000000	mode	EQU	0	*read
       00000000	open	EQU	0	*SYSCALL
       00000003	close	EQU	3	*SYSCALL
       00000001	read	EQU	1	*SYSCALL
000198 00000000	n	WORD	0	*bytes read by readf
00019c 00000000	fd	WORD	0
               	buf	BSS	8192
       00000004	len	EQU	4
0021a0 00000000	eptr	WORD	0
0021a4 00000000	rptr	WORD	0
               	dest	BSS	24

                Symbol Table
S 0x000000 main
S 0x000028 getwd
S 0x000048 store
S 0x000054 finish
S 0x00005c isupr
S 0x00006c islwr
S 0x000088 openf
S 0x0000bc closef
S 0x0000e4 getc
S 0x0000fc rtnc
S 0x00010c rtn0
S 0x000114 readf
S 0x00017c exit
S 0xffffffff stackb
S 0x000184 in
S 0x000000 mode
S 0x000000 open
S 0x000003 close
S 0x000001 read
S 0x000198 n
S 0x00019c fd
S 0x0001a0 buf
S 0x000004 len
S 0x0021a0 eptr
S 0x0021a4 rptr
S 0x0021a8 dest
